// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  password       String
  email          String    @unique(map: "user_email_idx")
  emailVerified  DateTime?
  role           String    @default("User") @db.VarChar(220)
  image          String?
  address        Json?     @db.Json
  payment_method String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  account Account[]
  session Session[]
}

model Account {
  userId            String @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Brand {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(220)
  created_at DateTime  @default(now())
  Product    Product[]
}

model Category {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(220)
  created_at DateTime  @default(now())
  Product    Product[]
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(220)
  slug        String   @unique(map: "product_slug_idx") @db.VarChar(240)
  description String?  @db.Text
  image_url   String[]
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     String   @db.Uuid
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @db.Uuid
  price       Decimal  @default(0) @db.Decimal(6, 2)
  inventory   Int      @default(0)
  rating      Decimal  @default(0) @db.Decimal(2, 1)
  isFeatured  Boolean  @default(false)
  created_at  DateTime @default(now())
}
